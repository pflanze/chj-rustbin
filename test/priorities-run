#!/bin/bash
set -meuo pipefail
IFS=

#set -x

cargo_target=${CARGO_TARGET-release}
priorities=target/"$cargo_target"/priorities

errors=0

target/"$cargo_target"/priorities-restore-mtimes

# ------------------------------------------------------------------
# Test usage as per 'prio' script from chj-scripts

out=$(mktemp)
err=$(mktemp)

if "$priorities" test/priorities/ -t "2024/10/06 08:00:00" > "$out" 2> "$err"; then
    echo "expecting exit code 1, got 0"
    false
else
    e=$?
    if [ $e -ne 1 ]; then
        cat "$out"
        cat "$err"
        echo "expecting exit code 1, got $e"
        false
    fi
fi

if ! diff -u test/priorities.out "$out"; then
    errors=$(( errors + 1 ))
fi

# Remove the lines with \t indentation, since those are backtraces
# that carry changing line numbers.
filtered_err=$(mktemp)
grep -E -v '^	' < "$err" > "$filtered_err"

if ! diff -u test/priorities.err "$filtered_err"; then
    errors=$(( errors + 1 ))
fi


if [ $errors -eq 0 ]; then
    rm -f "$out" "$err" "$filtered_err"
fi

# ------------------------------------------------------------------
# Test usage as per 'remind' script from chj-scripts

out=$(mktemp)
err=$(mktemp)

if "$priorities" test/priorities/ -t "2025-02-28 08:00:00" --age-min 30 --no-show-archived > "$out" 2> "$err"; then
    echo "expecting exit code 1, got 0"
    false
else
    e=$?
    if [ $e -ne 1 ]; then
        cat "$out"
        cat "$err"
        echo "expecting exit code 1, got $e"
        false
    fi
fi

if ! diff -u test/priorities2.out "$out"; then
    errors=$(( errors + 1 ))
fi

# Just ignore what's in "$err" this time?

if [ $errors -eq 0 ]; then
    rm -f "$out" "$err"
fi

# ------------------------------------------------------------------

exit $errors
